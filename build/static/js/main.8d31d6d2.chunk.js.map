{"version":3,"sources":["util/utils.ts","state/SessionState.ts","component/Card.tsx","component/CardRow.tsx","component/GameBoard.tsx","state/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["count","initGameBoard","col","arguments","length","undefined","symbols","charPairs","flatMap","v","split","randomizedPairs","shuffle","map","char","found","id","genId","chunk","getGameLayout","state","sessionState","boardConfig","initialState","playerTurn","prefs","columns","updateRowMatch","m1","m2","card","style","color","fontSize","width","height","border","transition","backgroundColor","activeCard","Object","objectSpread","transform","inactiveCard","matchedCard","Card","connect","turn","CardTap","type","payload","_ref","toggleState","useCallback","find","cardState","react_default","a","createElement","margin","onClick","CardRow","row","key","random","GameBoard","ResetGame","_useState","useState","_useState2","slicedToArray","setColumns","_useState3","_useState4","setSymbols","padding","display","flexDirection","placeholder","onChange","target","value","Number","CardRow_CardRow","stateReducers","combineReducers","action","_action$payload","concat","toConsumableArray","_state$playerTurn","c1","c2","flat","parts","partition","_map","_ref2","v1","v2","_map2","_map2$","match1","match2","updatedBoard","store","createStore","subscribe","console","log","getState","App","className","es","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d31d6d2.chunk.js","sourcesContent":["import {flatMap, shuffle, chunk} from 'lodash/fp'\nexport type CardState = {char:string, found: boolean, id: number}\nexport type GameConfig = CardState[][]\n\nconst gameChars: string = \"A,B,C,D,E,@,AB,BA\"\nlet count = 0\nexport const initGameBoard = (col = 4, symbols = gameChars):GameConfig => {\n    const charPairs = flatMap(v => [v,v], symbols.split(','))\n    const randomizedPairs = shuffle(charPairs).map(char => ({char, found: false, id: genId() }))\n    count = count + 1\n    return chunk(col, randomizedPairs)\n}\n\nconst genId = () => {\n    count = count + 1\n    return count\n}","import { CardState } from \"../util/utils\";\nimport { initGameBoard } from \"../util/utils\";\nimport {flatMap, partition, map } from \"lodash/fp\";\n\n//** ACTIONS */\nexport const CardTap = (char: string) => ({type: '[Card] TAP', payload: char})\nexport const ResetGame = (columns:number, symbols:string) => ({type: '[GameBoard] RESET', payload: {columns, symbols}})\n\n//** SELECTORS */\nexport const getGameLayout = (state: any) => state.sessionState.boardConfig\nexport const getPrefs = (state: any) => state.sessionState.prefs\n\n//** REDUCER */\nconst initialState = {\n    boardConfig: initGameBoard(),\n    playerTurn: [] as CardState[],\n    prefs: {columns: 4, symbols: 'A,B,C,D,E,F,G,H'}\n}\n\nexport function SessionStateReducer(state = initialState, action: {type: string, payload: any}) {\n    switch (action.type) {\n      case '[GameBoard] RESET':\n        const {columns, symbols} = action.payload;\n        return {...state, boardConfig: initGameBoard(columns, symbols), playerTurn: [], prefs: {columns, symbols }}\n      case '[Card] TAP':\n        if(state.playerTurn.length  < 2) return {...state, playerTurn:[...state.playerTurn, action.payload]}\n        else if(state.playerTurn.length === 2) {\n          const [c1, c2] = state.playerTurn\n          if(c1.char === c2.char) {\n            const flat = flatMap((v: CardState) => v, state.boardConfig)\n            const parts = partition((v: CardState) => v.id === c1.id || v.id === c2.id, flat)\n            const [[match1, match2]] = map(([v1, v2]: any) => [{...v1, found:true}, {...v2, found:true}], parts)\n            const updatedBoard = map(row => row.map(updateRowMatch(match1, match2)), {...state.boardConfig})\n            return {...state, boardConfig: updatedBoard, playerTurn:[action.payload]}  \n          }\n          return {...state, playerTurn:[action.payload]}\n        }\n        return state\n      default:\n        return state\n    }\n  }\n\n  const updateRowMatch = (m1: CardState, m2:CardState) => (card: CardState) =>  {\n    if(card.id === m1.id) return  m1;\n    else if(card.id === m2.id) return m2;\n    else return card;\n  }","import React, { FC, useCallback } from 'react'\nimport { connect } from 'react-redux'\nimport { CardState } from '../util/utils';\nimport { CardTap } from '../state/SessionState';\n\nconst style = {\n    base: {color:'black', fontSize: '70px', width: '15vw', height:'10vh', border: '1px solid gray', transition:'all 0.2s'},\n    inactive: {backgroundColor: 'rgb(10,120,90)'},\n    active: {backgroundColor: 'rgb(235,235,235)'},\n}\n\nconst activeCard = {...{ transform: 'rotateY(0deg)'}, ...style.base, ...style.active}\nconst inactiveCard = {...{ transform: 'rotateY(-180deg)'}, ...style.base, ...style.inactive}\nconst matchedCard = {...{ transform: 'rotateY(0deg)'}, ...style.base, ...{backgroundColor:'rgb(60,60,55)', border: '0'}}\n\ntype Props = { card: CardState, CardTap: any, turn: CardState[]}\nconst _Card: FC<Props> = ({card, CardTap, turn}) => {\n    const toggleState = useCallback(() => \n        !turn.find(v => v.id === card.id) ? CardTap(card) : null, [turn, CardTap, card])\n\n    const cardState = card.found \n    ? (<div style={matchedCard} />) \n    : !!turn.find(v => v.id === card.id)\n        ? <div style={activeCard}>{card.char}</div>\n        : <div style={inactiveCard}></div>\n    return (<div style={{margin:'15px'}} onClick={toggleState}> {cardState}</div>\n    )\n}\n\nconst mapStateToProps = (state: any ) => ({turn: state.sessionState.playerTurn})\n\nexport const Card = connect(mapStateToProps, {CardTap})(_Card)","import React, { FC } from 'react'\nimport { Card } from './Card'\nimport { CardState } from '../util/utils';\nimport random from 'lodash/fp/random'\n\ntype Props = { row: CardState[]}\n\nexport const CardRow: FC<Props> = ({row}) => {\n    return (\n        <div style={{backgroundColor: 'rgb(60,60,55)'}}>\n            {row.map(v => (<Card key={random(0,9999999)} card={v} />))}\n        </div>\n    )\n}","import React, { FC, useState } from 'react'\nimport { CardRow } from './CardRow'\nimport { GameConfig } from '../util/utils';\nimport random from 'lodash/fp/random';\nimport { connect } from 'react-redux';\nimport { getGameLayout, ResetGame } from '../state/SessionState';\n\ntype Props = {boardConfig: GameConfig, ResetGame: any}\n\nexport const _GameBoard: FC<Props> = ({boardConfig, ResetGame}) => {\n    const [columns, setColumns] = useState(4)\n    const [symbols, setSymbols] = useState('1,@,!,^,JKL,FBC,CBF,BCF')\n    const resetGame = () => {\n        ResetGame(columns, symbols)\n    }\n    \n    return (\n        <div style={{padding: '20px', display: 'flex'}}>\n            <div style={{flexDirection:'row'}}>\n                <div onClick={resetGame}>RESET</div>\n                <div><input placeholder={'Symbols ex: 1,A,$,BFG'} onChange={(v) => setSymbols(v.target.value)} /></div>\n                <div><input placeholder={'Row Count'} onChange={(v) => setColumns(Number(v.target.value))} /></div>\n            </div>\n            {boardConfig.map(row => <CardRow key={random(1,999999)} row={row} />)}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => ({boardConfig: getGameLayout(state)})\nexport const GameBoard = connect(mapStateToProps, {ResetGame})(_GameBoard)\n\n//** */","import { createStore } from 'redux'\nimport { combineReducers } from 'redux'\nimport { SessionStateReducer as sessionState } from './SessionState';\n\nconst stateReducers = combineReducers({\n  sessionState\n})\n\n  export const store = createStore(stateReducers)\n\n  store.subscribe(() => console.log(store.getState()))","import React, {FC} from 'react';\nimport { GameBoard } from './component/GameBoard'\nimport { Provider } from 'react-redux'\nimport { store } from './state'\nimport './App.css';\n\nconst App: FC = () => {\n  return (\n    <div className=\"App\">\n    <Provider store={store}>\n      <GameBoard />\n    </Provider>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}